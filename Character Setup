characterSetsGuids = {"a296a2", "071e5b", "134ba0", "cbf255", "973c82", "7f6cb8"}
playersPositions = {
  Blue = {-38.00, 0.75, -9.00},
  Green = {-19.00, 0.75, -9.00},
  Yellow = {0.00, 0.75, -9.00},
  Orange = {19.00, 0.75, -9.00},
  Red = {38.00, 0.75, -9.00}
}
boardReferencePosition = {-19.00, 0.75, -9.00}
actorsData = {
   {
    tag = "actor_deck",
    shifts = {-25.27, 0.99, -8.74},
    rotation = {0.00, 180.00, 180.00}
  },
  {
    tag = "actor_mini",
    shifts = {-19.08, 0.96, -2.26}
  },
  {
    tag = "actor_weapon",
    shifts = {-22.54, 0.96, -10.46},
    rotation = {0, 180.00, 0.00}
  },
  {
    tag = "actor_helm",
    shifts = {-20.01, 0.95, -9.36},
    rotation = {0, 180.00, 0.00}
  },
  {
    tag = "actor_armor",
    shifts = {-20.01, 0.95, -11.51},
    rotation = {0, 180.00, 0.00}
  },
  {
    tag = "actor_potion",
    shifts = {-20.18, 0.92, -14.58},
    rotation = {0, 180.00, 0.00}
  },
  {
    tag = "actor_wounds",
    shifts = {-10.14, 0.79, -16.22},
    rotation = {0, 180.00, 0.00}
  },
  {
    tag = "actor_order",
    shifts = {-9.49, 0.76, -10.54},
    rotation = {0, 180.00, 0.00}
  },
  {
    tag = "actor_aid",
    shifts = {-12.64, 0.86, -11.82},
    rotation = {0, 180.00, 0.00}
  },
  {
    tag = "actor_mastery",
    shifts = {-12.64, 0.88, -8.74},
    rotation = {0, 180.00, 0.00}
  },
  {
    tag = "actor_board",
    shifts = {-18.98, 0.85, -10.3},
    rotation = {0, 180.00, 0.00},
    locked = true
  },
  {
    tag = "actor_upgrades",
    shifts = {-25.08, 0.57, -20.77},
  },
  {
    tag = "actor_hp",
    shifts = {-22.08, 0.78, 1.06},
    locked = true
  },
  {
    tag = "actor_bullet",
    shifts = {-16.17, 1.10, -13.84},
    rotation = {359.41, 228.56, 359.33}
  }
}

function onLoad()
  setupCharacterSelectionUi()
end

function setupCharacterSelectionUi()
  for i,v in ipairs(characterSetsGuids) do
    setupSelectionUiForBag(getObjectFromGUID(v))
  end
end

function setupSelectionUiForBag(bag)
  if bag == nil then
    return
  end

  bag.createButton({
    click_function = "onSelectButtonClicked",
    function_owner = self,
    label = "Select",
    position = {0, 3, 0},
    width = 1300,
    height = 700,
    font_size = 250,
    rotation = {0, 180, 0}
  })
end

function onSelectButtonClicked(bag, playerColor)
  clearCharacterByPlayerColor(playerColor)
  spawnCharacterFromStore(bag, playerColor)
  lookAtMat(playerColor)
    Global.call("SetActivePlayer",playerColor)
end

function lookAtMat(playerColor)
  local board = findPlayerMatByColor(playerColor)
  if board == nil then
    return
  end

  Player[playerColor].lookAt({
    position = board.getPosition(),
    pitch = 60,
    distance = 30
  })
end

function clearCharacterByPlayerColor(playerColor)
  local objs = getAllObjects()

  for i,v in ipairs(objs) do
    if v.hasTag("owner_"..playerColor) then
      v.destruct()
    end
  end
end

function spawnCharacterFromStore(store, playerColor)
  local board = findPlayerMatByColor(playerColor)
  if board == nil then
    printError("I can't spawn character for this player color!")
    return
  end

  store.takeObject({
    smooth = false,
    callback_function = function(bag)
      spawnCharacterFromBag(bag, board, playerColor)
      bag.destruct()
    end
  })
end

function spawnCharacterFromBag(bag, board, playerColor)
  local objs = bag.getObjects()
  for _, objectData in ipairs(objs) do
    spawnActor(objectData, bag, board, playerColor)
  end
end

function spawnActor(objectData, bag, board, playerColor)
  local actorTag = getActorTag(objectData)
  if actorTag == nil then
    print("Can't find actor tag on object ", objectData.guid)
    return
  end

  local actorData = getActorDataByTag(actorTag)
  if actorData == nil then
    print("Can't find actor data for tag ", actorTag)
    return
  end

  bag.takeObject({
    position = getActorPosition(actorData, board),
    rotation = actorData.rotation or {0, 0, 0},
    smooth = false,
    guid = objectData.guid,
    callback_function = function(actor)
      actor.addTag("owner_"..playerColor)
      if actorData.locked then
        actor.setLock(actorData.locked)
      end
    end
  })
end

function getActorPosition(actorData, board)
  local shifts = substractVectors(actorData.shifts, boardReferencePosition)
  return addVectors(board.getPosition(), shifts)
end

function substractVectors(v1, v2)
  return {v1[1] - v2[1], v1[2] - v2[2], v1[3] - v2[3]}
end

function addVectors(v1, v2)
  return {v1[1] + v2[1], v1[2] + v2[2], v1[3] + v2[3]}
end

function getActorDataByTag(tag)
  for i,v in ipairs(actorsData) do
    if v.tag == tag then
      return v
    end
  end
end

function getActorTag(actorData)
  for i,v in ipairs(actorData.tags) do
    if string.find(v, "actor_") then
      return v
    end
  end
end

function findPlayerMatByColor(color)
  local position = playersPositions[color]
  if position == nil then
    return nil
  end

  local cast = Physics.cast({
    origin = {position[1], 2, position[3]},
    direction = {0, -1, 0},
    debug = true
  })

  for i,v in ipairs(cast) do
    if v.hit_object.hasTag("player_board") then
      return v.hit_object
    end
  end
end

function splitStr(inputstr, sep)
  if sep == nil then
    sep = "%s"
  end
  local t={}
  for str in string.gmatch(inputstr, "([^"..sep.."]+)") do
    table.insert(t, str)
  end
  return t
end

function printError(text)
  broadcastToAll(text, {1, 0, 0})
end

function printMessage(text, color)
  color = color or {1, 0.5, 0}
  broadcastToAll(text, color)
end
